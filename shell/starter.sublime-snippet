<snippet>
	<content><![CDATA[
#!/bin/bash
###############
# $1
###############

set -o errexit  # Exit the script when a command fails
set -o pipefail # Returns the status of the last command that threw a non-zero exit code.
# set -o nounset  # Exit the script when it tries to use undeclared variables.
# set -o xtrace   # Uncomment for debugging. Shows what gets executed.

###
# Generic functions/vars
##
RED='\033[1;31m'  		  # Red
GRN='\033[1;32m'  		  # Green
BLU='\033[1;34m'  		  # Blue
PRP='\033[1;35m'  		  # Purple
YEL='\033[1;33m'  		  # Yellow
WHT='\033[1;37m'  		  # White
NC='\033[1;0m'    		  # No Color
OPTERR=85         		  # Unic standard invalid options exit code
MC=\$WHT  		  		  # Basic message output color
MT=\$GRN           		  # Message title color
EC=\$RED           		  # Error message color
CC=\$PRP           		  # Code executed message color
WC=\$YEL           		  # Warning message color
FMT="+%H:%M:%S_%d-%m-%Y"  # Time stamp format for file naming
scriptName=\$(basename \$0) # Script name

###
# Message function to output to user.
##
function message()
{
	[ -z "\$2" ] && echo -e -n \$EC"❌  Programming error; message \\\$2: \$1" && exit 1

	if [ "\$2" -eq 1 ]; then
		# Show an error message.
		echo -e -n \$MC"[\$EC 🖥️  \$scriptName \$MC] \$1\${NC}\n"
	elif [ "\$2" -eq 0 ]; then
		# Show an general output message.
		echo -e -n \$MC"[\$MT 🖥️  \$scriptName \$MC] \$1\${NC}\n"
	elif [ "\$2" -eq 2 ]; then
		# Show a command output message.
		echo -e -n \$MC"[\$MT 🖥️  \$scriptName \$MC] \$1 [\$WC bash \$MC]\${NC}\n"
	fi

	if [ -z "\$3" ]; then
		return
	elif [ "\$3" -ge 0 ]; then
		exit \$3
	fi
}

###
# The help option. What to display to the user.
##
function usage()
{
	message "" 0
	message "Usage: ./\$scriptName" 0
	message "Options:" 0
	message "\t-h   Show this message." 0
	message "" 0
	exit \$1
}

###
# Accepted arguments.
##
args=":h"


( ! getopts "\$args" o ) && message "No options passed" 1 && usage 85

# Grab the arguments passed.
while getopts "\$args" o; do
	case "\$o" in
		h )
			usage 2
			;;
		\? )
			message "Invalid option passed: -\$OPTARG" 1
			usage 3
			;;
		: )
			message "Option -\$OPTARG requires an argument" 1
			usage 4
			;;
	esac
done

$0
]]></content>
	<!-- Optional: Set a tabTrigger to define how to trigger the snippet -->
	<tabTrigger>starter</tabTrigger>
	<!-- Optional: Set a scope to limit where the snippet will trigger -->
	<scope>source.shell</scope>
	<description>Starter code for bash scripting</description>
</snippet>
